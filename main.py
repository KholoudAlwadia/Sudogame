#Part 1
import valid as valid


def print_hi(name):
    # Use a breakpoint in the code line below to debug your script.
    print(f'Hi, {name}')
if __name__ == '__main__':
    board = [
        [7, 8, 0, 4, 0, 0, 1, 2, 0],
        [6, 0, 0, 0, 7, 5, 0, 0, 9],
        [0, 0, 0, 6, 0, 1, 0, 7, 8],
        [0, 0, 7, 0, 4, 0, 2, 6, 0],
        [0, 0, 1, 0, 5, 0, 9, 3, 0],
        [9, 0, 4, 0, 6, 0, 0, 0, 5],
        [0, 7, 0, 3, 0, 0, 0, 1, 2],
        [1, 2, 0, 0, 0, 7, 4, 0, 0],
        [0, 4, 9, 2, 0, 6, 0, 0, 7]
    ]

    def print_board(bo): # اعدادات طباعة البورد
        for i in range(len(bo)): # for whole board *عاموديا*
            if i % 3 == 0 and i != 0: # اذا وصل لثلاث خانات افقياً و ما كان عند اول خانة فا يطبع الفاصل الافقي بين المجموعات
                print("- - - - - - - - - - - - - ") #each 3 rows indivaduale


            for j in range(len(bo[0])): # يتحقق لكل خانة بالبورد لكل صف
                if j % 3 == 0 and j != 0: # اذا وصل للخانة الثالثة، حيث ان موقعه صار 3 ، و انه ليس على الخانة الاولى بموقع 0
                    print(" | ", end="") #  ابطع فاصل، بين كل 3 خانات

                if j == 8: # يتحقق لعدد خانات العامود ، اذا وصلت 8 *خانات المطلوب*
                    print(bo[i][j]) # يطبع البورد لانهاءها ب ابعادها
                else:  # يطبع اخر جزء من الاعداد حسب طول البورد و يطبع نهاية السطر بدون الانتقال لجديد
                    print(str(bo[i][j]) + " ", end="")

    def find_empty(bo): # لإرجاع الخانات التي تحتوي على صفر ك بوزيشن ، و اذا ما لقى فا عادي ينهيها
        for i in range(len(bo)):
            for j in range(len(bo[0])):
                if bo[i][j] == 0:
                    return (i, j)  # row, col

        return None
# print_board(board) للتحقق فقط

#Part2 8:30 min

board = [
    [7,8,0,4,0,0,1,2,0],
    [6,0,0,0,7,5,0,0,9],
    [0,0,0,6,0,1,0,7,8],
    [0,0,7,0,4,0,2,6,0],
    [0,0,1,0,5,0,9,3,0],
    [9,0,4,0,6,0,0,0,5],
    [0,7,0,3,0,0,0,1,2],
    [1,2,0,0,0,7,4,0,0],
    [0,4,9,2,0,6,0,0,7]
]

def solve(bo):
    find = find_empty(bo) #يسند قيمة الخانة الفارغة للقيمة
    if not find: # يتحقق من ان الخانه ليست فارغة من خلال القيمة المسند اليها مسبقاُ
        return True # يرجع صح
    else: # او يجعل البوزيشين المتكون من الثف و العامود فارغ
        row, col = find

    for i in range(1,10):  #لكل خانة في البورد
        if valid(bo, i, (row, col)): # اذا ان القيمة موجودة فسيقوم باسناد قيمة لكل بوزيشن
            bo[row][col] = i
            if solve(bo): # و يستدعي دالة التحقق اذا الخانة فارغة ليكمل الحل او ليرجع القيمة خطأ و يرجع البوزيشن 0 و يتيح له من خلال اللوب بان يجرب قيم اخرى
                return True
            bo[row][col] = 0
    return False







